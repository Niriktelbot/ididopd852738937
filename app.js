var txnId = require('./txnId');
const fs = require("fs")

const ADMINS = [5198364323] // ID –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞
const DB_URL = "mongodb://c52584_klikervadbot_com:GeRlaDipqizuz32@mongo1.c52584.h2,mongo2.c52584.h2,mongo3.c52584.h2/c52584_klikervadbot_com?replicaSet=MongoReplica" // URL –±–∞–∑—ã –±–æ—Ç–∞
const QIWI_TOKEN = "78ee5305ed7454be89f81d4975fc801b" // API –∫–ª—é—á QIWI –∫–æ—à–µ–ª—å–∫–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
const BOT_TOKEN = "5521629475:AAEQk3K5GVwSnfExHJ0eTxWiLsi5ER7TbGQ" // Bot API Token
  
oplata = 32

process.env.TZ = 'Moscow/Europe';


const mongo = require('mongoose');
mongo.connect(DB_URL);


var User = mongo.model('User', {
	id: Number,
	outbalance: Number,
	name: String,
	fc: Number,
	ref: Number,
	regDate: String,
	deposit: Number,
	payout: Number,
	fetuses: Number,
	menu: String,
	statusklik: String,
	ban: Boolean,
	refCount: Number,
	not: Boolean,
	data: String,
	spinsToday: Number,
	klik: Number,
});

var Task = mongo.model('Task', {
	id: Number
});

const Ticket = mongo.model('Ticket', {
	id: Number,
	amount: Number,
	wallet: String
});


const Start = [
    ["‚ûï –ö–ª–∏–∫–µ—Ä", "üíª –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"],
	["üåü –ü–∞—Ä—Ç–Ω—ë—Ä—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], 
	["üí¨ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"]
];

const Cancel = [
	["üö´ –û—Ç–º–µ–Ω–∞"]
];

const AdminPanel = [
	["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –í—ã–ø–ª–∞—Ç—ã"],
	["üìß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"],
	["üîô –ù–∞–∑–∞–¥"]
];

const RM_admin = {
	inline_keyboard: [
		[{ text: "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data: "admin_mm" }, { text: "‚öôÔ∏è –ö–ª–∏–∫–µ—Ä", callback_data: "admin_klik" }],
		[{ text: "üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data: "admin_u" }, { text: "üìÆ –í—ã–ø–ª–∞—Ç—ã", callback_data: "admin_w" }],
		[{ text: "üë• –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤ –∑–∞ 24 —á–∞—Å–∞", callback_data: "admin_top" }],
		
	]
};

const RM_admin_return = { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],] };

const RM_mm1 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚è∏ –ü–∞—É–∑–∞", callback_data: "admin_mm_pause" }],
	]
};

const RM_mm2 = {
	inline_keyboard: [
		[{ text: "‚èπ –°—Ç–æ–ø", callback_data: "admin_mm_stop" }],
		[{ text: "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "admin_mm_play" }],
	]
};

// –ù–µ –≥–¥–µ –Ω–µ —Å–ª–∏—Ç–æ

const { Qiwi } = require('node-qiwi-api');
const qiwi = new Qiwi(QIWI_TOKEN);

const Telegram = require('node-telegram-bot-api');
const bot = new Telegram(BOT_TOKEN, { polling: true });

bot.getMe().then(r => console.log(r));

bot.on('text', async (message) => {
	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	let $menu = [];
	var uid = message.from.id;
	var text = message.text;
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + text);
  
     if (dt.getDate() == oplata) return message.send('–•–æ—Å—Ç–∏–Ω–≥ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!');

	Start.map((x) => $menu.push(x));
	 /*if (ADMINS.find((x) => x == message.from.id)) $menu.push(["üîù –ê–¥–º–∏–Ω–∫–∞"]);*/

	if (message.text) {
		if (message.text.startsWith('/start') || message.text == 'üîô –ù–∞–∑–∞–¥') {
			let $user = await User.findOne({ id: message.from.id });
			if (!$user) {
				let schema = {
					id: message.from.id,
					outbalance: 0,
					name: message.from.first_name,
					fc: 0,
					ref: 0,
					regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}`,
					payout: 0,
					menu: "",
					statusklik: "",
					ban: false,
					refCount: 0,
					not: false,
					data: "",
					spinsToday: 0,
					klik: 0,
				};

				let reffer = Number(message.text.split('/start ')[1]);

				if (reffer) {
					let $reffer = await User.findOne({ id: reffer })
					if ($reffer) {
						schema.ref = $reffer.id
						await $reffer.inc('outbalance', 0.15)
						await $reffer.inc('refCount', 1)
						bot.sendMessage($reffer.id, `üîî –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id=${message.from.id}">–ø–∞—Ä—Ç–Ω—ë—Ä–∞</a> –∏ –ø–æ–ª—É—á–∏–ª–∏ 0.15‚ÇΩ`, { parse_mode: "HTML" });
					}
				}

				let user = new User(schema);
				await user.save();
			}

			
			return message.send(`
‚úåÔ∏è <b>–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}</b>
<b>–ö–ª–∏–∫–∞–π –∏ –ø–æ–ª—É—á–∞–π —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ</b>
`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}
// –ù–µ –≥–¥–µ –Ω–µ —Å–ª–∏—Ç–æ 
	message.user = await User.findOne({ id: message.from.id });
	if (!message.user) return message.send(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–∞–ø–∏—à–∏—Ç–µ /start`);
	if (message.user.ban) return
	if (!message.user.name || message.user.name != message.from.first_name)
		await User.findOneAndUpdate({ id: message.from.id }, { name: message.from.first_name })

	if (state[uid] == 7770 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined
		bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
			if (text.split("#").length == 4) {
				var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
				text = text.split("#")[0]
				mm_t(text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
			}
			else mm_t(text, e.message_id, e.chat.id, false, false, false, 100)
		})
	}

if ((await bot.getChatMember("@darkja", uid)).status == "left" || (await bot.getChatMember("@darkja", uid)).status == "left") {
		return message.send(`‚óºÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã`, { parse_mode: "html", reply_markup: { inline_keyboard: [ [{ text: "üåµ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url: "https://t.me/darkja" }],[{ text: "üåµ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url: "https://t.me/darkjachat" }],[{ text: "üåµ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url: "https://t.me/progerbt" }]] } })
	}

	if (state[uid] == 7772 && ADMINS.indexOf(message.from.id) !== -1 && text != "0") {
		state[uid] = undefined

		message.text = Number(message.text);
		let user = await User.findOne({ id: message.text });
		let u = user
		if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

		let partners = await User.find({ ref: message.text });
		await message.user.set('menu', '');
		var kb = { inline_keyboard: [] }
		if (u.ban) kb.inline_keyboard.push([{ text: "‚ôªÔ∏è –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data: "unban_" + u.id }])
		else kb.inline_keyboard.push([{ text: "üõë –ó–∞–±–∞–Ω–∏—Ç—å", callback_data: "ban_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "addOutBal_" + u.id }, { text: "‚úèÔ∏è –ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞", callback_data: "editOutBal_" + u.id }])
		kb.inline_keyboard.push([{ text: "‚ûï –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "addPayOuts_" + u.id }, { text: "‚úèÔ∏è –í—ã–≤–µ–¥–µ–Ω–æ", callback_data: "editPayOuts_" + u.id }])

		kb.inline_keyboard.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }])
		return message.send(`üìù –ü—Ä–∏–≥–ª–∞—Å–∏–ª: <b>${partners.length}</b>
üÜî ID: <code>${user.id}</code>

üí∞ –ë–∞–ª–∞–Ω—Å:
üì≠ –î–ª—è –≤—ã–≤–æ–¥–∞: ${user.outbalance.toFixed(2)}‚ÇΩ

‚ûï –ö–ª–∏–∫–æ–≤ –≤—Å–µ–≥–æ: <b>${message.user.klik}</b>

<b>–í—ã–≤–µ–ª: ${roundPlus(user.payout)}‚ÇΩ</b>
`, {
			parse_mode: "HTML",
			reply_markup: kb
		});

	}

	
	if (state[uid] == 7774 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { $inc: { outbalance: Number(text) } })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}
	if (state[uid] == 7776 && ADMINS.indexOf(message.from.id) !== -1) {
		state[uid] = undefined
		await User.findOneAndUpdate({ id: data[uid] }, { outbalance: Number(text) })
		bot.sendMessage(data[uid], `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${text}‚ÇΩ</b>!`, { parse_mode: html })
		return message.send(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${text}‚ÇΩ!`, { reply_markup: RM_admin_return });
	}

	if (message.text) {
		if (message.text == 'üö´ –û—Ç–º–µ–Ω–∞') {
			state[uid] = undefined
			await message.user.set('menu', '');
			return message.send('üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu == 'reinvest') {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		else if (message.text <= message.user.outbalance) {
			await message.user.set('menu', '');

			await message.user.dec('outbalance', message.text);
			await message.user.inc('buybalance', message.text);

			return message.send(`–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ ${message.text.toFixed(2)}‚ÇΩ`, {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	}

	if (message.user.menu.startsWith('amountQiwi')) {
		message.text = Number(message.text);

		if (!message.text) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');
		if (message.text <= 0) return message.send('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥!');

		if (message.text > message.user.outbalance) return message.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.');
		if (message.text < 3) return message.send('üî¥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª–µ–µ 3 —Ä—É–±–ª–µ–π!');
		}
			
		if (message.text <= message.user.outbalance) {
			await message.user.dec('outbalance', message.text); 
			let ticket = new Ticket({
				id: message.from.id,
				amount: message.text,
				wallet: message.user.menu.split('amountQiwi')[1]
			});

			await ticket.save();
			await message.user.set('menu', '');

			return message.send('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ.–í—ã–ø–ª–∞—Ç—ã –æ–¥–æ–±—Ä—è—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç - 72 —á–∞—Å–æ–≤', {
				reply_markup: {
					keyboard: $menu,
					resize_keyboard: true
				}
			});
		}
	

	if (message.user.menu == 'qiwi') {

		if (message.text.length < 5) return message.send('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!–ü—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});



		await message.user.set('menu', 'amountQiwi' + message.text);
		return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.outbalance.toFixed(2)}‚ÇΩ`);
	}

	if (message.text) {
		if (message.text == '‚ûï –ö–ª–∏–∫–µ—Ä') {
			return message.send('–í—ã–±–µ—Ä–∏—Ç–µ, –¥–µ–π—Å—Ç–≤–∏–µ', {
				reply_markup: {
					inline_keyboard: [
						[{ text: "üöÄ –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫", callback_data: "klik_one" }],
						[{ text: "üåü –°—É–ø–µ—Ä –∫–ª–∏–∫", callback_data: "klik_two" }],
					]
				}
			});
		}

		

		if (message.text == 'üíª –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç') {
			return message.send(`üìù –ò–º—è: <b>${message.from.first_name.replace(/(\<|\>)/g, '')}</b>
üÜî <b>ID:</b> <code>${message.from.id}</code>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${message.user.outbalance.toFixed(2)}‚ÇΩ
‚ûï <b>–ö–ª–∏–∫–æ–≤: </b> ${message.user.klik} —Ä–∞–∑
üåü <b>–ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤:</b> ${await User.countDocuments({ ref: message.from.id })} —á–µ–ª
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
ü¶ä <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> ${message.user.payout.toFixed(2)}‚ÇΩ 
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
					  [{ text: "üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data: "withdraw" }],
					]
				}
			});
	     }

if (message.text == 'üé≤ –ò–≥—Ä—ã') {
      return message.send(`<b> –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!</b>\n`, {
        parse_mode: "html",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîí –°—É–Ω–¥—É–∫", callback_data: "game_chest" }],
            [{ text: "üíà –†—É–ª–µ—Ç–∫–∞", callback_data: "game_roulette" }],
					]
				}
			});
		}

		if (message.text == 'üí¨ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã') {
			return message.send(`üí¨ <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:
==========================
‚ñ™Ô∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å –ø—Ä–æ–µ–∫—Ç–∞?</b> 
<code>- 3 –†—É–±–ª—è.</code>
‚ñ™Ô∏è<b>–ö–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã–ø–ª–∞—Ç—ã –≤ –±–æ—Ç–µ?</b>
<code> - –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –æ—Ç 5 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤.</code>
‚ñ™Ô∏è<b>–ü–ª–∞—Ç–∏—Ç–µ –ª–∏ –≤—ã?</b>
<code>- –¥–∞ –º—ã –ø–ª–∞—Ç–∏–º!</code>
‚ñ™Ô∏è<b>–ö–∞–∫ –∑–¥–µ—Å—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?</b>
 <code>- –ö–ª–∏–∫–∞–π –ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π.</code>
‚ñ™Ô∏è<b>–°–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–∏—Ç–µ?</b>
<code>- –º—ã –ø–ª–∞—Ç–∏–º –ø–æ 0.15 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –ø–æ 0.0016‚ÇΩ –∑–∞ –∫–ª–∏–∫</code>
‚ñ™Ô∏è<b>–ö—É–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –¥–µ–Ω—å–≥–∏?</b>
<code>- –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –Ω–∞ qiwi –∫–æ—à–µ–ª—ë–∫</code>
<b>==========================
‚óæÔ∏è–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ ‚§µÔ∏è</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üí≠ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url: "https://t.me/Femida9" },	{ text: "üí∏ –í—ã–ø–ª–∞—Ç—ã", url: "https://t.me/darkja" }]
	     ]
			}
		})
	}


		if (message.text == 'üåü –ü–∞—Ä—Ç–Ω—ë—Ä—ã') {
			return message.send(`<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
			
‚ñ´Ô∏è 0.15 üí∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ 

üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b> https://t.me/DarkKlicker_bot?start=${message.from.id}

<b>ü§ë –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ!</b>
		`, {
				parse_mode: "HTML"
			})
		}

		if (message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
			var s = await User.findOne({ id: 0 })
			let t = new Date()
            t = t.getTime() - 1593648000 * 1000
			var day = t / 86400000 ^ 0
			let stats = {
				users: await User.countDocuments(),
				users_today: await User.find({ regDate: `${new Date().getDate()}/${new Date().getMonth() + 1}/${new Date().getFullYear()}` }),
				cmds: message.message_id
			}

			stats.users_today = stats.users_today.length;

			return message.send(`
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ: ${stats.users}
üë´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${stats.users_today}
üóìÔ∏è –†–∞–±–æ—Ç–∞–µ–º: ${day-580} –¥–Ω–µ–π\n
`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "ü§µüèª‚Äç‚ôÇ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url: "https://t.me/Femida9" }, { text: "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", url: "https://t.me/molodoy_crash" }],
						[{ text: "üí¨ –ß–∞—Ç", url: "https://t.me/darkjachat" }, { text: "üè¶ –í—ã–ø–ª–∞—Ç—ã", url: "https://t.me/darkja" }, { text: "üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data: "pravila" }],
						[{ text: "üèÜ –¢–æ–ø –≤—ã–≤–æ–¥–æ–≤", callback_data: "topInv" }, { text: "üèÖ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", callback_data: "topRef" }],
					]
				}
			});
		}
	}

	if (ADMINS.indexOf(message.from.id) !== -1) {
		if (message.text == '/adm') {
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0

			return qiwi.getBalance(async (err, balance) => {
			bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>üïµ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>üìä–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>üí∂–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>ü•ù–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}

		if (message.text.startsWith('/setbuybalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('buybalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}
		
		if (message.text.startsWith('/restart')) {
		  var id = message.user.id
		  ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –±–æ—Ç–∞!`, { parse_mode: "HTML" }))
			setTimeout(() => { process.exit(0) }, 333);
		}

		if (message.text.startsWith('/setoutbalance')) {
			let cmd = message.text.split(' ');
			if (!cmd[1]) return message.send('–û—à–∏–±–∫–∞!');

			let user = await User.findOne({ id: Number(cmd[1]) });
			if (!user) return message.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');

			await user.set('outbalance', Number(cmd[2]));
			return message.send('–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
		}
	}
});

bot.on('callback_query', async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });
	var uid = message.chat.id
	let dt = new Date
	console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + uid + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: " + query.data)
	
	if (dt.getDate() == oplata) return message.send('–•–æ—Å—Ç–∏–Ω–≥ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!');

	if (!message.user) return bot.answerCallbackQuery(query.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', true);

	if (query.data == 'none') return bot.answerCallbackQuery(query.id, '–ü—Ä–∏–≤–µ—Ç! :)', true);

	if (query.data == 'pravila') {
return bot.sendMessage(uid, `<b>[üìã] ‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ 

[‚ÅâÔ∏è] 1.1 ‚Ä¢ –í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –µ—Å–ª–∏ —É –≤–∞—Å –º–∏–Ω–∏–º—É–º 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞
[‚ÅâÔ∏è] 1.2 ‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –≤—ã–ø–ª–∞—Ç—ã, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –µ—Å–ª–∏ –∑–∞–º–µ—á–µ–Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫–∞ - –≤—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è —Å –ø–æ—Ç–µ—Ä–µ–π –∑–∞–∫–∞–∑–∞–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
[‚ÅâÔ∏è] 1.3 ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –≤ —á–∞—Ç–µ –∏–ª–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–π!
[‚ÅâÔ∏è] 1.4 ‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –∏–º–µ—Ç—å: –ê–≤–∞—Ç–∞—Ä–∫—É, @–Æ–∑–µ—Ä
[‚ÅâÔ∏è] 1.5 ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞–π–Ω–∞ –¥–µ–Ω–µ–≥!
[‚ÅâÔ∏è] 1.6 ‚Ä¢ –ó–∞—è–≤–∫—É –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å!
[‚ÅâÔ∏è] 1.7 ‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–π 1 –º–∏–Ω—É—Ç—ã - 72 —á–∞—Å–∞
[ü¶ä] 1.8 ‚Ä¢ –°–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞!
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
[‚õîÔ∏è] ‚Ä¢ –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª {1.1, 1.2, 1.3, 1.4, 1.5, 1.6} - –ù–∞–∫–∞–∑–∞–Ω–∏–µ: –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã, –∏–ª–∏ –±–∞–Ω –≤ –±–æ—Ç–µ</b>`,
{ parse_mode: "html" })
}

	if (query.data.startsWith('topInv')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ payout: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÜ –¢–æ–ø 20 –ø–æ –≤—ã–≤–æ–¥–∞–º:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.payout}‚ÇΩ</b>` }).join("\n")}`, { parse_mode: "html" });
	}
	
	if (query.data.startsWith('topRef')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ refCount: -1 }).limit(20)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÖ –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤:</b>\n\n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.refCount}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` }).join("\n")}`, { parse_mode: "html" });
	}
	if (query.data.startsWith('Konkurs')) {
		bot.deleteMessage(message.chat.id, message.message_id)
		var top = await User.find({ id: { $ne: 0, $ne: 1 } }).sort({ refCount: -1 }).limit(10)
		var c = 0
		return bot.sendMessage(uid, `<b>üèÜ –ö–æ–Ω–∫—É—Ä—Å
==========================
‚ñ™Ô∏è–ù–∞—á–∞–ª–æ –∫–æ–Ω–∫—É—Ä—Å: 01.02.22
‚ñ™Ô∏è–∫–æ–Ω–µ—Ü –∫–æ–Ω–∫—É—Ä—Å: 01.03.22
==========================</b>
<b>‚ÅâÔ∏è –í –∫–æ–Ω–∫—É—Ä—Å–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∏–º–µ–Ω–Ω–æ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞! –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫–æ–Ω–∫—É—Ä—Å–∞ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã! –ø—Ä–∏–≤–µ–¥—è –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ! –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç–∞ –≤—Å–µ–≥–æ —Ç—Ä–∏
========================== 
ü•á –ú–µ—Å—Ç–æ = 50‚ÇΩ
ü•à –ú–µ—Å—Ç–æ = 50‚ÇΩ
ü•â –ú–µ—Å—Ç–æ = 50‚ÇΩ
==========================</b> \n${top.map((e) => { c++; return `<b>${c})</b> <a href="tg://user?id=${e.id}">${e.name ? e.name : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${e.refCount}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤` }).join("\n")}`,{
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "üíõ –ü—Ä–æ—à–ª—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏", callback_data: "Wins" }]
					]
				}
			});
	     }
	  
if (query.data == 'Administration') {
return bot.sendMessage(uid, `<b>üåµ –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–≥–æ —á—É–¥–Ω–æ–≥–æ –±–æ—Ç–∞!
‚úÖ –ü–∏—Å–∞—Ç—å –µ—Å–ª–∏:
1. –•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
2. –ù–∞—à–ª–∏ –±–∞–≥ –∏ —Ç–¥.
3. –•–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[{ text: "Admin4ik ‚òÉÔ∏è", 
						url: "https://t.me/molodoy_crash" }, { text: "üåπ –°–ø–∏—Ä–∏—Ç", 
						url: "https://t.me/Spiririt" }],
					]
				}
			});
	     }

	if (query.data == 'klik_one') {
	 //var bm = JSON.parse((await User.findOne({ id: 1 })).)
	 //if (!bm.onestatus) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: 0.0016} })
		await message.user.inc("klik", 1)
		return bot.sendMessage(message.chat.id, 'üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 0.0016‚ÇΩ', {
			reply_markup: {
				keyboard: Start,
				resize_keyboard: true
			}
		});
	}
	
	if (query.data == 'klik_two') {
	  //var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
	  //if (!bm.twostatus) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		if (message.user.spinsToday >= 2) return bot.answerCallbackQuery(query.id, '‚ùå –í—ã —É–∂–µ –∫–ª–∏–∫–Ω—É–ª–∏ 2 —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–µ—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!', true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: 0.012, spinsToday: 1 } })
		await message.user.inc("klik", 1)
		return bot.sendMessage(message.chat.id, 'üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 0.012‚ÇΩ', {
			reply_markup: {
				keyboard: Start,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'klik_dep') {
	  //var bm = JSON.parse((await User.findOne({ id: 1 })).menu)
	  //if (!bm.twostatus) return bot.answerCallbackQuery(query.id, 'üõë –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', true);
		if (message.user.spinsToday >= 0) return bot.answerCallbackQuery(query.id, 'üåü –£–ø—Å—Å‚Ä¶ –∏–∑–≤–∏–Ω–∏ –¥–æ—Ä–æ–≥—É—à–∞ –Ω–æ —ç—Ç–æ –µ—â—ë —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è!', true);
		await User.findOneAndUpdate({ id: uid }, { $inc: { outbalance: 0.012, spinsToday: 1 } })
		await message.user.inc("klik", 1)
		return bot.sendMessage(message.chat.id, 'üí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 0.012‚ÇΩ', {
			reply_markup: {
				keyboard: Start,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'withdraw') {
		if (message.user.outbalance < 3) return bot.answerCallbackQuery(query.id, 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 3‚ÇΩ', true);
		if (message.user.refCount < 9) return bot.answerCallbackQuery(query.id,'üö´ –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, —É –≤–∞—Å –º–µ–Ω—å—à–µ!', true);
		bot.deleteMessage(message.chat.id, message.message_id);
  await bot.sendMessage(message.chat.id, `–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è`, {
        parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
					[{ text: "ü•ù QIWI", callback_data: "qiwi" }],
					]
				}
			});
 }
	     
 if(query.data == 'qiwi') {
    await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, 'üìù –í–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: ==============================\n‚óæÔ∏è–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ä–æ–≤–∞–Ω—ã–π Qiwi –∫–æ—à–µ–ª—ë–∫‚ùóÔ∏è', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

 	if(query.data == 'payeer') {
    await message.user.set('menu', 'qiwi');
		await bot.sendMessage(message.chat.id, 'üìù –í–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: ============================== ‚óæÔ∏è–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ PAYEER', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data == 'reinvest') {
		await message.user.set('menu', 'reinvest');
		return bot.sendMessage(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.', {
			reply_markup: {
				keyboard: Cancel,
				resize_keyboard: true
			}
		});
	}

	if (query.data.startsWith('withdraw:')) {
		let id = Number(query.data.split('withdraw:')[1]);
		let ticket = await Ticket.findOne({ id });
	
		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);
		bot.sendMessage("@klickerviplati", `<a href="tg://user?id=${ticket.id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${ticket.amount}‚ÇΩ</b>\n–ü–°: QIWI ü•ù`, { parse_mode: "HTML" })
	
		if (ticket.wallet.indexOf("P") == -1) { // –ü–ª–∞—Ç—ë–∂ —á–µ—Ä–µ–∑ QIWI
		  qiwi.toWallet({ account: String(ticket.wallet), amount: ticket.amount, comment: 'üåü –í—ã–ø–ª–∞—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞ @KlickerZar_Bot' }, () => { });
		}
		bot.sendMessage(ticket.id,` ‚úÖ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>
	üí∏ –ù–∞ –í–∞—à QIWI –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>${ticket.amount}‚ÇΩ</b>\n
	
	üôè –ë—É–¥–µ–º –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤ —á–∞—Ç!
	‚ò∫Ô∏è –î–ª—è –Ω–∞—Å —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ!\n
	ü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>
	`, {
		  parse_mode: "html", reply_markup: {
			inline_keyboard: [
			  [{ text: "üï¥Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü", url: "https://t.me/molodoy_crash" }],
			  [{ text: "üì∞ –ù–æ–≤–æ—Å—Ç–∏ | üí∏ –í—ã–ø–ª–∞—Ç—ã", url: "https://t.me/klickerviplati" }],
	
			]
		  }
		});
		await User.findOneAndUpdate({ id: 0 }, { $inc: { fc: ticket.amount } })
		await User.findOneAndUpdate({ id: id }, { $inc: { payout: ticket.amount } }) 
	await ticket.remove();
		bot.editMessageText('–í—ã–ø–ª–∞—Ç–∏–ª!', {
		  chat_id: message.chat.id,
		  message_id: message.message_id
		});
	  }

	if (query.data.startsWith('back:')) {
		let id = Number(query.data.split('back:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		let user = await User.findOne({ id: ticket.id });
		bot.sendMessage(ticket.id, `–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${ticket.amount}‚ÇΩ`);

		await user.inc('buybalance', ticket.amount);
		await ticket.remove();

		return bot.editMessageText('–í–µ—Ä–Ω—É–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if (query.data.startsWith('take:')) {
		let id = Number(query.data.split('take:')[1]);
		let ticket = await Ticket.findOne({ id });

		if (!ticket) bot.deleteMessage(message.chat.id, message.message_id);

		await ticket.remove();
		return bot.editMessageText('–ó–∞–±—Ä–∞–ª!', {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}
	
	var d = query.data
	
	if (ADMINS.indexOf(query.from.id) !== -1) {
		if (d == "admin_mm") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7770
		} else if (d == "admin_w") {
			bot.deleteMessage(message.chat.id, message.message_id);
			let tickets = await Ticket.find();
			if (tickets.length == 0) return bot.sendMessage(uid, '–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç');
			await tickets.map((x) => {
				bot.sendMessage(uid, `üìù –ò–≥—Ä–æ–∫: <a href="tg://user?id=${x.id}">–ò–≥—Ä–æ–∫</a> (ID: <code>${x.id}</code>)\n
	üí∞ –°—É–º–º–∞: <code>${x.amount}</code>‚ÇΩ
	ü•ù –ö–æ—à–µ–ª—ë–∫: <code>${x.wallet}</code>`, {
					parse_mode: "HTML", reply_markup: { inline_keyboard: [[{ text: 'üì≠ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É', callback_data: `withdraw:${x.id}` }], [{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `back:${x.id}` }], [{ text: 'üö´ –ó–∞–±—Ä–∞—Ç—å', callback_data: `take:${x.id}` }]] }
				});
			});
		}
		
		else if (d == "admin_top") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var u = await User.find({ ref: { $ne: 0 }, _id: { $gt: mongo.Types.ObjectId.createFromTime(Date.now() / 1000 - 24 * 60 * 60) } })
			console.log(u)
			var top = []
			u.map((e) => {
				var t = top.filter(u => { if (e.ref == u.id) return true; else return false })
				if (t.length == 0) top.push({ id: e.ref, ref: 1 })
				else {
					top = top.filter(u => { if (e.ref == u.id) return false; else return true })
					top.push({ id: e.ref, ref: t[0].ref + 1 })
				}
			})
			top = top.sort((a, b) => { if (a.ref <= b.ref) return 1; else return -1 })
			top.length = 20
			var str = `<b>üïí –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤ –∑–∞ 24 —á–∞—Å–∞:</b>\n\n`
			for (const i in top) {
				var us = await User.findOne({ id: top[i].id })
				str += `<b>${Number(i) + 1})</b> <a href="tg://user?id=${us.id}">${us.name ? us.name : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</a> - <b>${top[i].ref}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`
			}
			bot.sendMessage(uid, str, { reply_markup: { inline_keyboard: [[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }]] }, parse_mode: "HTML" })
		}
		
		else if (d == "admin_u") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7772
		}
		
		else if (d.startsWith("admin_klik")) {
			bot.deleteMessage(message.chat.id, message.message_id);
			var klik = JSON.parse((await User.findOne({ id: 1 })).menu)
			if (d.split("_")[2] == "false") bm.onestatus = false
			if (d.split("_")[2] == "true") bm.onestatus = true
			
			if (d.split("_")[2] == "false") bm.twostatus = false
			if (d.split("_")[2] == "true") bm.twostatus = true
			await User.updateOne({ id: 1, menu: JSON.stringify(bm) })
			console.log(bm)
			bot.sendMessage(uid, `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã –∫–ª–∏–∫–µ—Ä:\n
‚ûï –ö–ª–∏–∫–µ—Ä: ${bm.status ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
‚ûï –ö–ª–∏–∫–µ—Ä 2—Ö: ${bm.status ? "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" : "üö´ –í—ã–∫–ª—é—á–µ–Ω–æ"}
`, {
				reply_markup: {
					inline_keyboard: [
		[{ text: (bm.onestatus ? '–í—ã–∫–ª—é—á–∏—Ç—å' : "–í–∫–ª—é—á–∏—Ç—å"), callback_data: (bm.status ? 'admin_klik_one_false' : "admin_klik_one_true") }],
						[{ text: (bm.twostatus ? '–í—ã–∫–ª—é—á–∏—Ç—å' : "–í–∫–ª—é—á–∏—Ç—å"), callback_data: (bm.twostatus ? 'admin_klik_two_false' : "admin_klik_two_true") }],
						[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "admin_return" }],
					]
				}, parse_mode: "HTML"
			})
		}
		
		else if (d.split("_")[0] == "addOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7774
			data[uid] = d.split("_")[1]
		}
		
		else if (d.split("_")[0] == "addPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77745555
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editBuyBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7775
			data[uid] = d.split("_")[1]
		}
		else if (d.split("_")[0] == "editOutBal") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 7776
			data[uid] = d.split("_")[1]
		}
		
		else if (d.split("_")[0] == "editPayOuts") {
			bot.deleteMessage(message.chat.id, message.message_id);
			bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { reply_markup: RM_admin_return, parse_mode: "HTML" })
			state[uid] = 77765555
			data[uid] = d.split("_")[1]
		}
		
		else if (d == "admin_mm_stop") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			mm_status = false;
			bot.editMessageText("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", { chat_id: mm_achatid, message_id: mm_amsgid })
			mm_u = []
		}
		else if (d == "admin_mm_pause") {
			var tek = Math.round((mm_i / mm_total) * 40)
			var str = ""
			for (var i = 0; i < tek; i++) str += "+"
			str += '>'
			for (var i = tek + 1; i < 41; i++) str += "-"
			bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm2, parse_mode: html })
			mm_status = false;
		}
		else if (d == "admin_mm_play") {
			mm_status = true;
			bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n', { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1 })
		}
		else if (d.split("_")[0] == "ban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: true })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		else if (d.split("_")[0] == "unban") {
			var uuid = Number(d.split("_")[1])
			await User.findOneAndUpdate({ id: uuid }, { ban: false })
			bot.editMessageText('<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!', { chat_id: uid, message_id: message.message_id, parse_mode: html })
		}
		
		else if (d == "admin_return") {
			bot.deleteMessage(message.chat.id, message.message_id);
			var h = process.uptime() / 3600 ^ 0
			var m = (process.uptime() - h * 3600) / 60 ^ 0
			var s = process.uptime() - h * 3600 - m * 60 ^ 0
			var heap = process.memoryUsage().rss / 1048576 ^ 0
			var b = (await User.findOne({ id: 0 })).deposit

			return qiwi.getBalance(async (err, balance) => {
				bot.sendMessage(uid, '<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n<b>üï∞–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ' + h + ' —á–∞—Å–æ–≤ ' + m + ' –º–∏–Ω—É—Ç ' + s + ' —Å–µ–∫—É–Ω–¥\n<b>üë≤–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: </b>' + (await User.countDocuments({})) + '\n<b>üíæ–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ' + heap + "–ú–ë\n<b>üìÆ–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> " + await Ticket.countDocuments() + "\n<b>üîê–ë–∞–ª–∞–Ω—Å QIWI:</b> " + balance.accounts[0].balance.amount + "‚ÇΩ", { parse_mode: "HTML", reply_markup: RM_admin })
			})
		}
	}
});

var state = []


User.prototype.inc = function (field, value = 1) {
	this[field] += value;
	return this.save();
}

User.prototype.dec = function (field, value = 1) {
	this[field] -= value;
	return this.save();
}

User.prototype.set = function (field, value) {
	this[field] = value;
	return this.save();
}



/*var lastTxnId
async function payeerCheck() {
  require('request')({
    method: 'POST',
    url: 'https://payeer.com/ajax/api/api.php?history',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    body: `account=${config.payeer.account}&apiId=${config.payeer.apiId}&apiPass=${config.payeer.apiPass}&action=history&count=1&type=incoming
 ` }, async function (error, response, body) {
    body = JSON.parse(body)
    for (const txnId in body.history) {
      if (lastTxnId == null) { lastTxnId = txnId; }
      else if (txnId != lastTxnId) {
        lastTxnId = txnId
        if (body.history[txnId].type != "transfer" || body.history[txnId].status != "success" || !body.history[txnId].comment) return;
  /*      if (body.history[txnId].comment.startsWith('SMC')) {
          let id = Number(body.history[txnId].comment.split("SMC")[1]);
          let user = await User.findOne({ id });
          if (!user) return;
          await user.inc('game_payin', x.sum.amount);
          await user.inc('game_balance', x.sum.amount);
          await bot.sendMessage(id, `üí≥ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ ${x.sum.amount}‚ÇΩ`);
          bot.sendMessage("@UzPay_Balance", `‚ö°Ô∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>`, { parse_mode: "HTML" })
          return
        }  *

        let user = await User.findOne({ id: Number(body.history[txnId].comment.split("GG")[1]) });
        if (!user) return;
        if (body.history[txnId].creditedCurrency == "RUB")
          var sum = roundPlus(Number(body.history[txnId].creditedAmount))
        else return
        var id = user.id

        var b = (await User.findOne({ id: 0 })).deposit

        if (b == 0) {
          await user.inc('deposit', sum);
          await user.inc('buybalance', sum);
          await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: sum } })
          bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${sum}‚ÇΩ`);
		      bot.sendMessage("@UzPay_Balance", `<a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª <b>${sum}‚ÇΩ</b>\n–ü–°: PAYEER`, { parse_mode: "HTML" })
          ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${sum}‚ÇΩ\n–ü–°: PAYEER`, { parse_mode: "HTML" }))
        } else {
          await user.inc('deposit', sum);
          b = b / 100
          await user.inc('buybalance', sum + sum * b);
          await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: sum } })
          bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${sum}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(sum * b)}‚ÇΩ!`);
		      bot.sendMessage("@UzPay_Balance", `<a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª <b>${sum}‚ÇΩ –∏ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å - ${roundPlus(sum * b)}p!</b>\n–ü–°: PAYEER`, { parse_mode: "HTML" })
	
          ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${sum}‚ÇΩ + ${roundPlus(sum * b)}‚ÇΩ –±–æ–Ω—É—Å\n–ü–°: PAYEER`, { parse_mode: "HTML" }))
        }
        await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(sum * 0.05) } })
        await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(sum * 0.05) } })
        bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${sum}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(sum * 0.05)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "HTML" }).catch()
      }
    }
  })
}

if (config.payeer.enabled) {
  setInterval(payeerCheck, 10000)
  payeerCheck()
}
*/
var state = []

setInterval(async () => {
	qiwi.getOperationHistory({ rows: 10, operation: 'IN' }, (err, response) => {
		response.data.map(async (x) => {
			if (!x.comment) return;
			if (txnId.indexOf(x.txnId) !== -1) return;
			if (x.comment.startsWith('SMC')) {
			let id = Number(x.comment.split("SMC")[1]);
			if (!id) return;
			let user = await User.findOne({ id });
			if (!user) return;
			if (x.sum.currency != 643) return;
			var b = (await User.findOne({ id: 0 })).deposit / 200
			var sum = x.sum.amount
			if (b > 0) {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 50000 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 200‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Dima9606`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}

				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage("@klickerviplati", `üåü <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å\n–ü–°: QIWI`, { parse_mode: "HTML" }))

			}
			else if (b == 0) {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 50000 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 200‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Dima9606`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}
				await user.inc('buybalance', x.sum.amount);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ`);
				bot.sendMessage("@klickerviplati", `üåü <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ\n–ü–°: QIWI`, { parse_mode: "HTML" }))
			} else {
				await user.inc('deposit', x.sum.amount);
				if (user.deposit + x.sum.amount > 500000 && !user.not) {
					await bot.sendMessage(id, `üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –±–æ–ª–µ–µ, —á–µ–º –Ω–∞ 200‚ÇΩ –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –≤ —á–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤!\n–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Dima9606`);
					await User.findOneAndUpdate({ id: user.id }, { not: true })
				}
				b = b / 200
				await user.inc('buybalance', x.sum.amount + x.sum.amount * b);
				await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: x.sum.amount } })
				bot.sendMessage(id, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${x.sum.amount}‚ÇΩ –∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å - ${roundPlus(x.sum.amount * b)}‚ÇΩ!`);
				bot.sendMessage("@klickerviplati", `üåüÔ∏è <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b> –∏ –ø–æ–ª—É—á–∏–ª ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å–æ–º!\n–ü–°: QIWI`, { parse_mode: "HTML" })
				ADMINS.map((a) => bot.sendMessage(a, `<a href="tg://user?id=${id}">–ò–≥—Ä–æ–∫</a> —Å–¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç: ${x.sum.amount}‚ÇΩ + ${roundPlus(x.sum.amount * b)}‚ÇΩ –±–æ–Ω—É—Å`, { parse_mode: "HTML" }))

			}
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { buybalance: roundPlus(x.sum.amount * 0.08) } })
			await User.findOneAndUpdate({ id: user.ref }, { $inc: { outbalance: roundPlus(x.sum.amount * 0.08) } })

			bot.sendMessage(user.ref, `ü§ù –í–∞—à <a href="tg://user?id=${id}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${x.sum.amount}‚ÇΩ</b>!\nüí∏ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ <b>${roundPlus(x.sum.amount * 0.08)}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞`, { parse_mode: "HTML" }).catch()

			txnId.push(x.txnId)
			require('fs').writeFileSync('./txnId.json', JSON.stringify(txnId));
			}
		});
	});
}, 10000);

async function mmTick() {
	if (mm_status) {
		try {
			mm_i++
			if (mm_type == "text") {
				if (mm_btn_status)
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] }, parse_mode: html }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendMessage(mm_u[mm_i - 1], mm_text, { parse_mode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			else if (mm_type == "img") {
				if (mm_btn_status)
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, reply_markup: { inline_keyboard: [[{ text: mm_btn_text, url: mm_btn_link }]] } }).then((err) => { mm_ok++ }).catch((err) => { mm_err++ })
				else
					bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { mm_err++ })
			}
			if (mm_i % 10 == 0) {
				var tek = Math.round((mm_i / mm_total) * 40)
				var str = ""
				for (var i = 0; i < tek; i++) str += "+"
				str += '>'
				for (var i = tek + 1; i < 41; i++) str += "-"
				bot.editMessageText("<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err, { chat_id: mm_achatid, message_id: mm_amsgid, reply_markup: RM_mm1, parse_mode: html })
			}
			if (mm_i == mm_total) {
				mm_status = false;
				bot.editMessageText("–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total, { chat_id: mm_achatid, message_id: mm_amsgid })
				sendAdmins('<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–£—Å–ø–µ—à–Ω–æ:</b> ' + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω–æ:</b> " + mm_err, { parse_mode: html })
				mm_u = []
			}
		} finally { }
	}
}

setInterval(mmTick, 100);

var mm_total
var mm_i
var mm_status = false
var mm_amsgid
var mm_type
var mm_imgid
var mm_text
var mm_achatid
var mm_btn_status
var mm_btn_text
var mm_btn_link
var mm_ok
var mm_err

async function mm_t(text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	console.log(ut)
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}
	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "text"
	mm_text = text
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

bot.on('photo', async msg => {
	if (msg.from != undefined) {
		var uid = msg.from.id
		if (state[uid] == 7770 && ADMINS.indexOf(uid) !== -1) {
			state[uid] = undefined
			var text = ""
			if (msg.caption != undefined) text = msg.caption
			bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
				if (text.split("#").length == 4) {
					var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
					text = text.split("#")[0].replace(/(^\s*)|(\s*)$/g, '').replace(' ', '')
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)

				}
				else
					mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, false, false, false, 100)

			})
		}
	}
})



async function mm_img(img, text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
	let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
	mm_total = ut.length
	mm_u = []
	for (var i = 0; i < mm_total; i++)
		mm_u[i] = ut[i].id
	if (size != 100) {
		mm_u = randomizeArr(mm_u)
		mm_total = Math.ceil(mm_total * (size / 100))
		mm_u.length = mm_total
	}

	ut = undefined
	mm_i = 0;
	mm_amsgid = amsgid
	mm_type = "img"
	mm_text = text
	mm_imgid = img
	mm_ok = 0
	mm_err = 0
	mm_achatid = achatid
	if (btn_status) {
		mm_btn_status = true
		mm_btn_text = btn_text
		mm_btn_link = btn_link
	}
	else
		mm_btn_status = false
	mm_status = true;
}

function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

const html = "HTML"

function sendAdmins(text, params) { for (var i = 0; i < ADMINS.length; i++) bot.sendMessage(ADMINS[i], text, params) }

var data = []


function roundPlus(number) { if (isNaN(number)) return false; var m = Math.pow(10, 2); return Math.round(number * m) / m; }

async function main() {
	var u = (await User.find({}, { id: 1 })).map((e) => { return e.id })
	for (var i in u) {
		await User.findOneAndUpdate({ id: u[i] }, { refCount: await User.countDocuments({ ref: u[i] }) })
		console.log(i)
	}

}
//main()

//User.updateMany({}, {payout: 0, not: false}).then()





function randomizeArr(arr) {
	var j, temp;
	for (var i = arr.length - 1; i > 0; i--) {
		j = Math.floor(Math.random() * (i + 1));
		temp = arr[j];
		arr[j] = arr[i];
		arr[i] = temp;
	}
	return arr;
}

async function ticker() {
	var d = new Date()
	var minutes = d.getMinutes()
	var hours = d.getHours()
	var date = d.getDate()
	if (minutes == 0 && hours == 0)
		await User.updateMany({}, { spinsToday: 0 })
}

setInterval(ticker, 1000 * 60)


function randomInteger(min, max) {
	// —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç min –¥–æ (max+1)
	let rand = min + Math.random() * (max + 1 - min);
	return Math.floor(rand);
}
User.insertMany([
{ "_id" : "5dfaac928d3ea75ef63263ba", "trees": [ ], "id" : 0, "buybalance" : 0, "outbalance": 0, "klik": 0, "bhivebalance" :0, "wb_profits" : 0, "name" : "Infix ¬©", "fc" : 0, "ref" : 0., "regDate" : "18/12/2019", "deposit" : 0, "payout" : 0, "fetuses" : 0, "menu" : "{\"price\":20,\"status\":false,\"count\":5,\"bought\":3}", "statusklik" :"{\"status\":false}", "lastCollect" : 1576709266975, "ban" : false, "refCount" : 0, "not" : false, "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 },
{ "_id" : "5dfbe31493b06e7818e2c5d7", "trees" : [ ], "id" : 1, "menu" : "{\"price\":20,\"status\":true,\"count\":5,\"bought\":3}", "statusklik" :"{\"status\":true}", "__v" : 0, "totalEarn" : 0, "prudLevel" : 0 }
]).then()

User.updateMany({}, {statusklik: ""}).then()
